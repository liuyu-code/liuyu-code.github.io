<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[链表问题总结（相交、成环）]]></title>
    <url>%2F2019%2F09%2F20%2F%E9%93%BE%E8%A1%A8%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93%EF%BC%88%E7%9B%B8%E4%BA%A4%E3%80%81%E6%88%90%E7%8E%AF%EF%BC%89%2F</url>
    <content type="text"><![CDATA[1.求链表倒数第K个节点（单向链表）？​ 思路：采用双指针法。P1指向表头，P2指向P1相隔K的节点，同时向后移动，当P2到达表尾(P2-&gt;next=null), P1即倒数第K个节点。 2.判断链表是否有环？​ 首先循环链表是带环链表的一种特殊情况。 ​ 思想：类似于生活中跑步追赶的问题。两个人从相同起点出发，其中一个人的速度比另外一个人快，结果经过一段时间后，速度快的人会追上速度慢的人，此时速度快的人比慢的人多跑了一圈，这样就证明存在了环。 ​ 方法：两个指针P1和P2，从链表的起点开始，P1一次移动一个步长，P2一次移动2个步长，若两个指针相等（并且不等于null），则P2绕了n圈之后追上了P1，则链表存在环。 3.判断两个链表是否存在交点？​ 思想：若L1、L2都无环，直接遍历L1和L2，找到他们的尾节点，若尾节点相同，则必定相交。时间复杂度O（m+n），空间复杂度O（1）。若一个链表有环，一个链表无环，则必不可能相交。若两个都有环，遍历L1环上的每一个节点是否和L2环上的某个节点相等。 4.一个链表成环，环的入口在哪里？​ 设A为起点，B为入口，C为第一次相遇点。且AB=a，BC=x，链表长度为L，环的一圈长度为r。假设相遇时，fast节点走了2s，slow节点走了s。则有 ​$$s+nr=2s\则有 \ s=nr\而a+x=s,r=L-a\则有a+x=(n-1)r+r=(n-1)r+L-a\则a=(n-1)r+L-a-x。$$​ 而L-a-x为CB的长度（不是BC），则有从链表头A到环入口B等于（n-1）次循环内环加上相遇点到环入口的距离CB，则可让slow节点从A出发，fast节点从C出发。当两者再次相遇的时候就是入口B。（这里可能比较绕，建议大家自己在草稿纸上画一下，就很明显了） 5.如何求单链表中环的长度？​ 思路：仍然采用双指针，一个指针速度为2，一个指针速度为1，则第一次相遇的时候存在：$$2t_1-t_1=kr$$​ 第二次相遇的时候有：$$2t_2-t_2=(k+1)r$$​ 两式相减有：$$t_2-t_1=r$$​ 因此只需要记录第一次相遇时前进的步数t1和第二次相遇前进的步数t2,即可求出环的长度。]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构，链表</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Machine Learning入门笔记1（吴恩达）]]></title>
    <url>%2F2019%2F09%2F20%2FMachineLearning%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B01%EF%BC%88%E5%90%B4%E6%81%A9%E8%BE%BE%EF%BC%89%2F</url>
    <content type="text"><![CDATA[1.机器学习算法分类 supervised learning（监督学习） classification problem（分类问题） regression problem（回归问题） unsupervised learning（无监督学习）（clustering algorithm，聚类） 2.supervised learning中的regression problem流程：​ 监督学习首先会有一个原始的训练集Training Set，之后通过你的学习算法Learning Algorithm得到一个预测函数h(x), 这个预测函数可以通过input数据得到一个estimated output。 3.regression problem中的代价函数cost function最小化求解参数：​ 其实这就是一个优化问题，最简单的模型就是线性拟合，和我们初高中学的最小二乘法拟合直线的思想差不多。目的是通过坐标系上一系列已知的点拟合出一条最佳直线，这个直线y=ax+b中的a和b其实就是你需要求解的目标。当你有多个因素影响的时候，方程可能就是y=a0+a1x1+a2x2+…+amxm。这里向量（a0,a1,a2,…am）其实就是在回归问题中需要求解的目标，使得这个线性方程能够最好的拟合这些已知的点，然后利用这个求得的方程去预测之后的结果。 3.1 两种求解参数的方法：梯度下降法求解参数的递推公式如下，$$\theta_j :=\theta_j-\alpha\frac{1}{m}\sum_{i=1}^{m}(h_\theta(x^(i)-y^(i)x_j^(i) （\theta_j代表从0更新到n）$$​ 在实际应用中可以采用特征缩放（feature scaling）对x_i进行处理可以让梯度下降的更快，也可以采用均值归一化进行特征处理。 正规方程组求解参数（可以一步得到）：$$\theta=(X^TX)^-1 X^Ty$$​ 正规方程组求解可以不进行特征缩放。 3.2梯度下降法和正规方程组求解方法的区别梯度下降法（Gradient descent）：需要选择一个相对最佳的下降率alpha；需要多次迭代；但可以在特征向量很多的时候工作的很好，适用于多特征的问题。 正规方程组方法(Normal equation)：不需要选择下降率，也不需要迭代，只需要计算一个矩阵的转置和矩阵相乘的逆，时间复杂度大概是O(n^3)，当特征数量太大之后计算特别慢，适合处理小特征的问题。]]></content>
      <categories>
        <category>Machine Learning</category>
      </categories>
      <tags>
        <tag>Machine Learning</tag>
        <tag>吴恩达</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[github+hexo搭建个人博客]]></title>
    <url>%2F2019%2F09%2F17%2Fgithub-hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[1.搭建前的准备工作 有一个github的账号 安装了git for windows 安装node.js、npm ​ 这些软件直接安装最新版的就可以。 2.创建仓库​ 在github上创建一个名为username.github.io的仓库，其中username就是你的github上的用户名。当搭建步骤完成之后你就可以直接访问 https://username.github.io 来访问你的博客了。 3.配置SSH key​ 因为提交代码的时候需要拥有github上的权限，因此需要采用ssh key解决本地和服务器之间的连接问题。在git bash（一个在Windows下使用linux命令行的terminal）上先检查本机是否已经存在的ssh key。 1$ cd ~/.ssh ​ 若提示：No such file or directory 说明这是你第一次使用git。 1$ ssh-keygen -t rsa -C &quot;邮件地址&quot; ​ 输入命令后需要三次回车，最终会在你的电脑的用户目录下生成一个文件夹，找到.ssh/id_rsa.pub文件，用记事本打开后复制里面的内容，然后打开你的github主页，进入个人设置中的SSH and GPG keys，在New SSH key中填写一个title，然后将复制的SSH key粘贴到key那里就可以了。 ​ 然后在git bash上： 1$ ssh -T git@github.com ​ 当提示Are you sure you want to continue connecting (yes/no)?，输入yes就会看到Hi username！巴拉巴拉的，说明你已经配置成功了SSH。 ​ 之后还需要再配置一下name和email。 12$ git config --global user.name &quot;username&quot; //这里引号中的是你的github的name$ git config --global user.email &quot;xxx@163.com&quot; //这里引号中是你之前绑定的邮箱 4.使用hexo写博客​ hexo是一个简单、快速、强大的基于Github Pages的博客发布工具，支持Markdown，有许多优秀的插件和主题。 4.1 安装​ 在git bash上： 1$ npm install -g hexo 4.2 创建hexo工作空间​ 在你的磁盘上创建一个hexo文件夹（名字随意），这个文件夹就是将来写博客和存放代码的地方，因此最好选定好位置（我的是f盘上的hexo-github文件夹）。然后在git bash上： 12$ cd /f/hexo-github/$ hexo init ​ hexo会自动下载文件到这个目录中，里面包括了source，theme等文件。然后在git bash上： 12$ hexo g #genereat，这个类似编译生成$ hexo s #server,启动本地服务，开启后可以访问http://localhost:4000，就可以看到博客界面 4.3 修改主题​ 官方的默认主题比较丑，因此可以换一个主题，我选择是hexo-theme-yilia。下载这个主题： 12$ cd /f/hexo-github/$ git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia ​ 主题下载后在themes下，之后修改hexo-github下（不是你下载的主题下）的_config.yml，将里面的theme: landscape 改为 theme: yilia。需要注意这里属性的修改在冒号后面都是有空格的，很多时候达不到你想要的效果就是因为这个原因，查看一下是否忘记空格了。修改完之后直接执行hexo g重新生成。要是还有一些问题，可以先clean一下，使用 hexo clean命令，然后重新生成和发布。 4.4 上传到github​ 之前都是部署在本地，现在需要将自己的博客上传到外网，即github上。首先要进行一些上传前的配置。 ​ 首先安装一个插件： 1$ npm install hexo-deployer-git ​ 然后在hexo-github文件夹下配置_config.yml中有关deploy部分： 1234deploy: type: git repository: git@github.com:liuyu-code/liuyu-code.github.io.git branch: master ​ 之后你就可以使用hexo d将所有有改动的部分提交到github上。 5.常见hexo命令1234567hexo new &quot;postName&quot; #新建文章hexo new page &quot;pageName&quot; #新建页面hexo generate #生成静态页面至public目录hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）hexo deploy #部署到GitHubhexo help # 查看帮助hexo version #查看Hexo的版本 ​ 缩写： 1234hexo n == hexo new #后者等价于前者hexo g == hexo generatehexo s == hexo serverhexo d == hexo deploy ​ 组合命令： 12hexo s -g #生成并本地预览hexo d -g #生成并上传 6.写博客​ 首先定位到hexo的工作根目录，在git bash中执行命令： 1hexo new &apos;my_first_blog&apos; ​ hexo会在_posts下生成相关md文件，只需要我们打开这个文件就可以开始写博客了，写博客需要掌握一些markdown的基本语法规则，一开始我采用的Notepad++这个软件来写的，后来发现一个更好用的博客编辑工具Typora，相比记事本来说，实在是鸟枪换炮了，这个软件真的好用，强烈推荐。]]></content>
      <categories>
        <category>github hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[my-first-blog]]></title>
    <url>%2F2019%2F09%2F12%2Fmy-first-blog%2F</url>
    <content type="text"><![CDATA[github搭建博客的好处介绍使用github pages服务搭建博客的好处有： 全是静态文件，访问速度快； 免费方便，不用花一分钱就可以搭建一个自由的个人博客，不需要服务器不需要后台； 可以随意绑定自己的域名，不仔细看的话根本看不出来你的网站是基于github的； 数据绝对安全，基于github的版本管理，想恢复到哪个历史版本都行； 博客内容可以轻松打包、转移、发布到其它平台； 等等；]]></content>
      <tags>
        <tag>github pages</tag>
      </tags>
  </entry>
</search>
